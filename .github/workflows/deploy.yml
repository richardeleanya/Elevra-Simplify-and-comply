name: Deploy to Production

on:
  push:
    branches:
      - main

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_API_REPO: ${{ secrets.ECR_API_REPO }}
  ECR_WEB_REPO: ${{ secrets.ECR_WEB_REPO }}
  # Terraform backend config (TF_CLOUD_TOKEN or S3 backend vars) should be in secrets as needed

jobs:
  build-and-push:
    name: Build and Push Docker Images to ECR
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # AWS OIDC Auth (assumes role configured in AWS console)
      - name: Configure AWS Credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and Push API Docker Image
        working-directory: api
        run: |
          docker build -t $ECR_API_REPO:latest .
          docker tag $ECR_API_REPO:latest $ECR_API_REPO:${{ github.sha }}
          docker push $ECR_API_REPO:latest
          docker push $ECR_API_REPO:${{ github.sha }}

      - name: Build and Push Web Docker Image
        working-directory: apps/web
        run: |
          docker build -t $ECR_WEB_REPO:latest .
          docker tag $ECR_WEB_REPO:latest $ECR_WEB_REPO:${{ github.sha }}
          docker push $ECR_WEB_REPO:latest
          docker push $ECR_WEB_REPO:${{ github.sha }}
      - name: Create CodeDeploy Deployment
        run: |
          aws deploy create-deployment \
            --application-name "$({{ secrets.PROJECT }}-api-codedeploy)" \
            --deployment-group-name "$({{ secrets.PROJECT }}-api-dg)" \
            --s3-location bucket=${{ secrets.CODEDEPLOY_BUCKET }},key=imagedefinitions.json,bundleType=json \
            --file-exists-behavior OVERWRITE

  terraform:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: build-and-push
    environment: production
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Trigger CodeDeploy for API
        run: |
          aws deploy create-deployment \
            --application-name "${{ secrets.PROJECT }}-api-codedeploy" \
            --deployment-group-name "${{ secrets.PROJECT }}-api-dg" \
            --revision revisionType=AppSpecContent,appSpecContent={"content":$(printf '{"Resources":[{"TargetService":{"Type":"AWS::ECS::Service","Properties":{"TaskDefinition": {"Fn::GetParam":"ImageURI"},"LoadBalancerInfo":{"ContainerName":"api","ContainerPort":3000}}}]}')},"bundleType":"JSON" \
            --file-exists-behavior OVERWRITE

      # AWS OIDC Auth (reuse for Terraform)
      - name: Configure AWS Credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        working-directory: infra
        run: terraform init

      - name: Terraform Plan
        working-directory: infra
        run: terraform plan -out=plan

      - name: Terraform Apply
        working-directory: infra
        run: terraform apply -auto-approve plan